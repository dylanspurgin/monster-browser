{"version":3,"sources":["webpack:///webpack:///src/app/layout/_layout.scss","webpack:///webpack:///src/app/monster-list/_monster-list.scss","webpack:///webpack:///src/app/monster-detail/_monster-detail.scss","webpack:///webpack:///src/app/style/app.scss","webpack:///webpack:///src/app/style/_reset.scss","webpack:///webpack:///src/app/style/_theme.scss"],"names":[],"mappings":"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","file":"app.43ee1c9c2c382c29714e43b4f1eda0b0.css","sourcesContent":["// Introspection\n// =============\n\n// Brightness\n// ----------\n/// Determine the brightnss of a color,\n/// adjusted for the visual brightnesses\n/// of different hues.\n/// @group inspect\n/// @param {Color} $color -\n///   Any color value to be analysed\n/// @return {Number} -\n///   The relative visual brightness of the color,\n///   from 0 (black) through 225959 (white).\n@function brightness(\n  $color\n) {\n  // Multiply the primary hues by their respective visual weights\n  $red: red($color) * 299;\n  $green: green($color) * 587;\n  $blue: blue($color) * 114;\n\n  // Collate the resulting total weight\n  @return round($red + $green + $blue / 1000);\n}\n\n// Harmonies\n// =========\n\n\n// Harmony Weight\n// --------------\n/// Calculate an appropriate mix-weighting between two colors,\n/// based on the relative brightness of the colors.\n/// @access private\n/// @group internal\n/// @param {Color} $color -\n///   The base color value, which will be returned\n///   with a subtle harmony color mixed in.\n/// @param {Color} $harmony -\n///   A harmony color to mix into your base color.\n/// @param {Percentage} $median -\n///   The median amount of your harmony color\n///   to mix into your base color,\n///   given the same relative brightness.\n/// @param {Percentage} $margin -\n///   The margin of weight-adjustment\n///   for mixing colors with different relative brihtness.\n///   A margin of `8%` with a median of `16%`\n///   will return mixes weighted between `8%` and `24%` (`16% ± 8%`).\n/// @return {Percentage} -\n///   A percent-value, weighted above or below the given median,\n///   based on the relative visual brightness of the two colors given.\n///   Resulting weights are limited to the `0%-50%` range.\n@function _harmony-weight(\n  $color,\n  $harmony,\n  $median,\n  $margin\n) {\n  // Get the relative brightness of each color\n  $white-bright: brightness(#fff);\n  $color-bright: brightness($color);\n  $harmony-bright: brightness($harmony);\n\n  // Determine the appropriate mix based on comparative brightness\n  $diff: ($harmony-bright - $color-bright) / $white-bright;\n  $mix: $median + round($diff * $margin);\n\n  // Cut off mix values outside the 0%-50% range\n  $mix: min(50%, $mix);\n  $mix: max(0%, $mix);\n\n  // Return the calculated mix weight\n  @return $mix;\n}\n\n\n// Harmonize\n// ---------\n/// Mix a subtle harmony color into your base color,\n/// weighted by the relative brightness of the two colors.\n/// @group manipulate\n/// @param {Color} $color -\n///   The base color value, which will be returned\n///   with a subtle harmony color mixed in.\n/// @param {Color | Function} $harmony ['complement'] -\n///   A harmony color to mix into your base color,\n///   or the name of a function like `complement` or `invert`\n///   that can manipulate the base color and return another color value.\n/// @param {Percentage} $median [16%] -\n///   The median amount of your harmony color\n///   to mix into your base color,\n///   given the same relative brightness.\n/// @param {Percentage} $margin [8%] -\n///   The margin of weight-adjustment\n///   for mixing colors with different relative brihtness.\n///   A margin of `8%` with a median of `16%`\n///   will return mixes weighted between `8%` and `24%` (`16% ± 8%`).\n@function harmonize(\n  $color,\n  $harmony: 'complement',\n  $median: 16%,\n  $margin: 8%\n) {\n  @if type-of($harmony) != 'color' {\n    // If $harmony is not a color, try running it as a function\n    @if function-exists($harmony) {\n      $harmony: call($harmony, $color);\n    }\n\n    // Error if $harmony is still not a valid color\n    @if type-of($harmony) != 'color' {\n      @error '$harmony `#{$harmony}` [#{type-of($harmony)}] is not a valid color for harmonizing.';\n    }\n  }\n\n  // Get the appropriate weighting\n  $mix: _harmony-weight($color, $harmony, $median, $margin);\n\n  // Mix a subtle harmony into your color!\n  @return mix($harmony, $color, $mix);\n}\n\n// Tints & Shades\n// --------------\n\n// Shade\n// -----\n/// Mix a color with black.\n/// @group manipulate\n/// @param {Color} $color - The initial color to be adjusted.\n/// @param {Percentage} $amount - The amount of black to mix in, from `0%-100%`.\n/// @return {Color} - your new, darker color!\n@function shade(\n  $color,\n  $amount\n) {\n  @return mix(#000, $color, $amount);\n}\n\n// Tint\n// -----\n/// Mix a color with white.\n/// @group manipulate\n/// @param {Color} $color - The initial color to be adjusted.\n/// @param {Percentage} $amount - The amount of white to mix in, from `0%-100%`.\n/// @return {Color} - your new, lighter color!\n@function tint(\n  $color,\n  $amount\n) {\n  @return mix(#fff, $color, $amount);\n}\n\n@function neutral($color) {\n\t@if (is-highest-key-value($color)) {\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 19%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 13%);\n\t\t}\n\t}\n\t@else if (is-high-key-value($color)) {\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 31%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 23%);\n\t\t}\n\t}\n\t@else {\n\t\t@if is-highest-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 31%);\n\t\t}\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 26%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 23%);\n\t\t}\n\t}\n}\n\n/*\n * Colors\n */\n$red: \t hsl(355, 100%, 50%);\n$orange: hsl(20, 100%, 50%);\n$yellow: hsl(60, 100%, 50%);\n$green:  hsl(120, 100%, 50%);\n$cyan:   hsl(180, 100%, 50%);\n$blue:   hsl(240, 100%, 50%);\n$violet: hsl(300, 100%, 50%);\n\n// Starting colors\n$first-color: $green;\n$second-color: complement($first-color);\n\n// Primary shades\n$brand-primary: harmonize($first-color, $second-color);\n$brand-primary-neutral: neutral($brand-primary);\n$brand-primary-neutral-light: lighten($brand-primary-neutral, 35%);\n$brand-primary-neutral-dark: darken($brand-primary-neutral, 35%);\n\n// Secondary shades\n$brand-secondary: harmonize($second-color, $first-color);\n$brand-secondary-neutral: neutral($brand-secondary);\n$brand-secondary-neutral-light: lighten($brand-secondary-neutral, 35%);\n$brand-secondary-neutral-dark: darken($brand-secondary-neutral, 35%);\n\n// Black & white\n$black: darken($brand-primary-neutral, 38%);\n$white: lighten($brand-primary-neutral, 44%);\n\n\n\n/*\n * Text\n */\n$font-family-sans-serif: 'Concert One', cursive;\n$font-family-serif: 'Space Mono', monospace;\n$font-size-small: 14px;\n$font-size-medium: 16px;\n$font-size-large: 20px;\n$font-size-x-large: 24px;\n\n\n\n/*\n * Layout\n */\n$mobile-max-width: 767px;\n$tablet-min-width: 768px;\n$tablet-max-width: 1024px;\n\n$site-padding-left: 40px;\n$site-padding-right: 40px;\n\n$content-padding-top: 20px;\n$monster-list-width: 200px;\n\n$header-height: 60px;\n$footer-height: 40px;\n\nhtml {\n    position: relative;\n    min-height: 100%;\n\n    body {\n        margin-bottom: $footer-height; // Height of sticky footer\n    }\n}\n\nlayout {\n    header {\n        background-color: $brand-primary-neutral-dark;\n\n        .top-nav {\n            display: flex;\n            flex-direction: row;\n            justify-content: space-between;\n\n            height: $header-height;\n            line-height: $header-height;\n\n            padding-left: $site-padding-left;\n            padding-right: $site-padding-right;\n\n            div {\n                h1 {\n                    color: $brand-primary-neutral-light;\n                    font-size: $font-size-large;\n                    text-transform: uppercase;\n                }\n            }\n\n            nav {\n                ul {\n                    list-style-type: none;\n                    line-height: $header-height;\n                }\n            }\n        }\n\n        .lead-in {\n            background-color: $brand-primary-neutral-light;\n            color: $brand-primary-neutral-dark;\n            padding-top: 20px;\n            padding-bottom: 20px;\n            padding-left: $site-padding-left;\n            padding-right: $site-padding-right;\n            text-align: center;\n        }\n\n    }\n\n    main {\n        padding-right: $site-padding-right;\n    }\n\n    footer {\n        position: absolute;\n        bottom: 0;\n        width: 100%;\n        padding-left: $site-padding-left;\n        padding-right: $site-padding-right;\n        height: $footer-height;\n        line-height: $footer-height;\n        background-color: $brand-primary-neutral-dark;\n\n        a, a:hover {\n            color: $brand-primary-neutral-light;\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// webpack:///src/app/layout/_layout.scss","// Introspection\n// =============\n\n// Brightness\n// ----------\n/// Determine the brightnss of a color,\n/// adjusted for the visual brightnesses\n/// of different hues.\n/// @group inspect\n/// @param {Color} $color -\n///   Any color value to be analysed\n/// @return {Number} -\n///   The relative visual brightness of the color,\n///   from 0 (black) through 225959 (white).\n@function brightness(\n  $color\n) {\n  // Multiply the primary hues by their respective visual weights\n  $red: red($color) * 299;\n  $green: green($color) * 587;\n  $blue: blue($color) * 114;\n\n  // Collate the resulting total weight\n  @return round($red + $green + $blue / 1000);\n}\n\n// Harmonies\n// =========\n\n\n// Harmony Weight\n// --------------\n/// Calculate an appropriate mix-weighting between two colors,\n/// based on the relative brightness of the colors.\n/// @access private\n/// @group internal\n/// @param {Color} $color -\n///   The base color value, which will be returned\n///   with a subtle harmony color mixed in.\n/// @param {Color} $harmony -\n///   A harmony color to mix into your base color.\n/// @param {Percentage} $median -\n///   The median amount of your harmony color\n///   to mix into your base color,\n///   given the same relative brightness.\n/// @param {Percentage} $margin -\n///   The margin of weight-adjustment\n///   for mixing colors with different relative brihtness.\n///   A margin of `8%` with a median of `16%`\n///   will return mixes weighted between `8%` and `24%` (`16% ± 8%`).\n/// @return {Percentage} -\n///   A percent-value, weighted above or below the given median,\n///   based on the relative visual brightness of the two colors given.\n///   Resulting weights are limited to the `0%-50%` range.\n@function _harmony-weight(\n  $color,\n  $harmony,\n  $median,\n  $margin\n) {\n  // Get the relative brightness of each color\n  $white-bright: brightness(#fff);\n  $color-bright: brightness($color);\n  $harmony-bright: brightness($harmony);\n\n  // Determine the appropriate mix based on comparative brightness\n  $diff: ($harmony-bright - $color-bright) / $white-bright;\n  $mix: $median + round($diff * $margin);\n\n  // Cut off mix values outside the 0%-50% range\n  $mix: min(50%, $mix);\n  $mix: max(0%, $mix);\n\n  // Return the calculated mix weight\n  @return $mix;\n}\n\n\n// Harmonize\n// ---------\n/// Mix a subtle harmony color into your base color,\n/// weighted by the relative brightness of the two colors.\n/// @group manipulate\n/// @param {Color} $color -\n///   The base color value, which will be returned\n///   with a subtle harmony color mixed in.\n/// @param {Color | Function} $harmony ['complement'] -\n///   A harmony color to mix into your base color,\n///   or the name of a function like `complement` or `invert`\n///   that can manipulate the base color and return another color value.\n/// @param {Percentage} $median [16%] -\n///   The median amount of your harmony color\n///   to mix into your base color,\n///   given the same relative brightness.\n/// @param {Percentage} $margin [8%] -\n///   The margin of weight-adjustment\n///   for mixing colors with different relative brihtness.\n///   A margin of `8%` with a median of `16%`\n///   will return mixes weighted between `8%` and `24%` (`16% ± 8%`).\n@function harmonize(\n  $color,\n  $harmony: 'complement',\n  $median: 16%,\n  $margin: 8%\n) {\n  @if type-of($harmony) != 'color' {\n    // If $harmony is not a color, try running it as a function\n    @if function-exists($harmony) {\n      $harmony: call($harmony, $color);\n    }\n\n    // Error if $harmony is still not a valid color\n    @if type-of($harmony) != 'color' {\n      @error '$harmony `#{$harmony}` [#{type-of($harmony)}] is not a valid color for harmonizing.';\n    }\n  }\n\n  // Get the appropriate weighting\n  $mix: _harmony-weight($color, $harmony, $median, $margin);\n\n  // Mix a subtle harmony into your color!\n  @return mix($harmony, $color, $mix);\n}\n\n// Tints & Shades\n// --------------\n\n// Shade\n// -----\n/// Mix a color with black.\n/// @group manipulate\n/// @param {Color} $color - The initial color to be adjusted.\n/// @param {Percentage} $amount - The amount of black to mix in, from `0%-100%`.\n/// @return {Color} - your new, darker color!\n@function shade(\n  $color,\n  $amount\n) {\n  @return mix(#000, $color, $amount);\n}\n\n// Tint\n// -----\n/// Mix a color with white.\n/// @group manipulate\n/// @param {Color} $color - The initial color to be adjusted.\n/// @param {Percentage} $amount - The amount of white to mix in, from `0%-100%`.\n/// @return {Color} - your new, lighter color!\n@function tint(\n  $color,\n  $amount\n) {\n  @return mix(#fff, $color, $amount);\n}\n\n@function neutral($color) {\n\t@if (is-highest-key-value($color)) {\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 19%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 13%);\n\t\t}\n\t}\n\t@else if (is-high-key-value($color)) {\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 31%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 23%);\n\t\t}\n\t}\n\t@else {\n\t\t@if is-highest-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 31%);\n\t\t}\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 26%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 23%);\n\t\t}\n\t}\n}\n\n/*\n * Colors\n */\n$red: \t hsl(355, 100%, 50%);\n$orange: hsl(20, 100%, 50%);\n$yellow: hsl(60, 100%, 50%);\n$green:  hsl(120, 100%, 50%);\n$cyan:   hsl(180, 100%, 50%);\n$blue:   hsl(240, 100%, 50%);\n$violet: hsl(300, 100%, 50%);\n\n// Starting colors\n$first-color: $green;\n$second-color: complement($first-color);\n\n// Primary shades\n$brand-primary: harmonize($first-color, $second-color);\n$brand-primary-neutral: neutral($brand-primary);\n$brand-primary-neutral-light: lighten($brand-primary-neutral, 35%);\n$brand-primary-neutral-dark: darken($brand-primary-neutral, 35%);\n\n// Secondary shades\n$brand-secondary: harmonize($second-color, $first-color);\n$brand-secondary-neutral: neutral($brand-secondary);\n$brand-secondary-neutral-light: lighten($brand-secondary-neutral, 35%);\n$brand-secondary-neutral-dark: darken($brand-secondary-neutral, 35%);\n\n// Black & white\n$black: darken($brand-primary-neutral, 38%);\n$white: lighten($brand-primary-neutral, 44%);\n\n\n\n/*\n * Text\n */\n$font-family-sans-serif: 'Concert One', cursive;\n$font-family-serif: 'Space Mono', monospace;\n$font-size-small: 14px;\n$font-size-medium: 16px;\n$font-size-large: 20px;\n$font-size-x-large: 24px;\n\n\n\n/*\n * Layout\n */\n$mobile-max-width: 767px;\n$tablet-min-width: 768px;\n$tablet-max-width: 1024px;\n\n$site-padding-left: 40px;\n$site-padding-right: 40px;\n\n$content-padding-top: 20px;\n$monster-list-width: 200px;\n\nmonster-list {\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n\n    div.monster-nav {\n        min-width: $monster-list-width;\n        padding-top: $content-padding-top;\n\n        ul {\n            height: 100%;\n            list-style-type: none;\n            margin: 0;\n            padding: 0;\n\n            .monster-list-heading {\n                text-transform: uppercase;\n                text-align: center;\n                font-size: $font-size-large;\n                padding-bottom: 8px;\n            }\n\n            li {\n\n                a {\n                    display: block;\n                    text-decoration: none;\n                    padding: 10px 0 10px $site-padding-left;\n                    background-color: $brand-secondary-neutral-light;\n                    color: $brand-secondary-neutral-dark;\n                    border-bottom: solid 1px $brand-secondary-neutral;\n                }\n                a:hover {\n                    text-decoration: none;\n                    color: $brand-secondary-neutral-dark;\n                    background-color: $brand-secondary-neutral;\n                }\n                span {\n                    display: none;\n                }\n            }\n\n            li:last-of-type a {\n                border-bottom: none;\n            }\n\n            li.active {\n\n                a {\n                    display: none;\n                }\n                span {\n                    display: block;\n                    padding: 10px 0 10px $site-padding-left;\n                    font-weight: bold;\n                    color: $brand-secondary-neutral-light;\n                    background-color: $brand-secondary-neutral-dark;\n                    border-bottom: solid 1px $brand-secondary-neutral-dark;\n                }\n            }\n\n        }\n\n    }\n\n\n    div.monster-content {\n        padding-top: $content-padding-top;\n    }\n\n    div.monster-content--empty-state {\n        padding-top: $content-padding-top;\n        text-align: center;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// webpack:///src/app/monster-list/_monster-list.scss","// Introspection\n// =============\n\n// Brightness\n// ----------\n/// Determine the brightnss of a color,\n/// adjusted for the visual brightnesses\n/// of different hues.\n/// @group inspect\n/// @param {Color} $color -\n///   Any color value to be analysed\n/// @return {Number} -\n///   The relative visual brightness of the color,\n///   from 0 (black) through 225959 (white).\n@function brightness(\n  $color\n) {\n  // Multiply the primary hues by their respective visual weights\n  $red: red($color) * 299;\n  $green: green($color) * 587;\n  $blue: blue($color) * 114;\n\n  // Collate the resulting total weight\n  @return round($red + $green + $blue / 1000);\n}\n\n// Harmonies\n// =========\n\n\n// Harmony Weight\n// --------------\n/// Calculate an appropriate mix-weighting between two colors,\n/// based on the relative brightness of the colors.\n/// @access private\n/// @group internal\n/// @param {Color} $color -\n///   The base color value, which will be returned\n///   with a subtle harmony color mixed in.\n/// @param {Color} $harmony -\n///   A harmony color to mix into your base color.\n/// @param {Percentage} $median -\n///   The median amount of your harmony color\n///   to mix into your base color,\n///   given the same relative brightness.\n/// @param {Percentage} $margin -\n///   The margin of weight-adjustment\n///   for mixing colors with different relative brihtness.\n///   A margin of `8%` with a median of `16%`\n///   will return mixes weighted between `8%` and `24%` (`16% ± 8%`).\n/// @return {Percentage} -\n///   A percent-value, weighted above or below the given median,\n///   based on the relative visual brightness of the two colors given.\n///   Resulting weights are limited to the `0%-50%` range.\n@function _harmony-weight(\n  $color,\n  $harmony,\n  $median,\n  $margin\n) {\n  // Get the relative brightness of each color\n  $white-bright: brightness(#fff);\n  $color-bright: brightness($color);\n  $harmony-bright: brightness($harmony);\n\n  // Determine the appropriate mix based on comparative brightness\n  $diff: ($harmony-bright - $color-bright) / $white-bright;\n  $mix: $median + round($diff * $margin);\n\n  // Cut off mix values outside the 0%-50% range\n  $mix: min(50%, $mix);\n  $mix: max(0%, $mix);\n\n  // Return the calculated mix weight\n  @return $mix;\n}\n\n\n// Harmonize\n// ---------\n/// Mix a subtle harmony color into your base color,\n/// weighted by the relative brightness of the two colors.\n/// @group manipulate\n/// @param {Color} $color -\n///   The base color value, which will be returned\n///   with a subtle harmony color mixed in.\n/// @param {Color | Function} $harmony ['complement'] -\n///   A harmony color to mix into your base color,\n///   or the name of a function like `complement` or `invert`\n///   that can manipulate the base color and return another color value.\n/// @param {Percentage} $median [16%] -\n///   The median amount of your harmony color\n///   to mix into your base color,\n///   given the same relative brightness.\n/// @param {Percentage} $margin [8%] -\n///   The margin of weight-adjustment\n///   for mixing colors with different relative brihtness.\n///   A margin of `8%` with a median of `16%`\n///   will return mixes weighted between `8%` and `24%` (`16% ± 8%`).\n@function harmonize(\n  $color,\n  $harmony: 'complement',\n  $median: 16%,\n  $margin: 8%\n) {\n  @if type-of($harmony) != 'color' {\n    // If $harmony is not a color, try running it as a function\n    @if function-exists($harmony) {\n      $harmony: call($harmony, $color);\n    }\n\n    // Error if $harmony is still not a valid color\n    @if type-of($harmony) != 'color' {\n      @error '$harmony `#{$harmony}` [#{type-of($harmony)}] is not a valid color for harmonizing.';\n    }\n  }\n\n  // Get the appropriate weighting\n  $mix: _harmony-weight($color, $harmony, $median, $margin);\n\n  // Mix a subtle harmony into your color!\n  @return mix($harmony, $color, $mix);\n}\n\n// Tints & Shades\n// --------------\n\n// Shade\n// -----\n/// Mix a color with black.\n/// @group manipulate\n/// @param {Color} $color - The initial color to be adjusted.\n/// @param {Percentage} $amount - The amount of black to mix in, from `0%-100%`.\n/// @return {Color} - your new, darker color!\n@function shade(\n  $color,\n  $amount\n) {\n  @return mix(#000, $color, $amount);\n}\n\n// Tint\n// -----\n/// Mix a color with white.\n/// @group manipulate\n/// @param {Color} $color - The initial color to be adjusted.\n/// @param {Percentage} $amount - The amount of white to mix in, from `0%-100%`.\n/// @return {Color} - your new, lighter color!\n@function tint(\n  $color,\n  $amount\n) {\n  @return mix(#fff, $color, $amount);\n}\n\n@function neutral($color) {\n\t@if (is-highest-key-value($color)) {\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 19%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 13%);\n\t\t}\n\t}\n\t@else if (is-high-key-value($color)) {\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 31%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 23%);\n\t\t}\n\t}\n\t@else {\n\t\t@if is-highest-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 31%);\n\t\t}\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 26%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 23%);\n\t\t}\n\t}\n}\n\n/*\n * Colors\n */\n$red: \t hsl(355, 100%, 50%);\n$orange: hsl(20, 100%, 50%);\n$yellow: hsl(60, 100%, 50%);\n$green:  hsl(120, 100%, 50%);\n$cyan:   hsl(180, 100%, 50%);\n$blue:   hsl(240, 100%, 50%);\n$violet: hsl(300, 100%, 50%);\n\n// Starting colors\n$first-color: $green;\n$second-color: complement($first-color);\n\n// Primary shades\n$brand-primary: harmonize($first-color, $second-color);\n$brand-primary-neutral: neutral($brand-primary);\n$brand-primary-neutral-light: lighten($brand-primary-neutral, 35%);\n$brand-primary-neutral-dark: darken($brand-primary-neutral, 35%);\n\n// Secondary shades\n$brand-secondary: harmonize($second-color, $first-color);\n$brand-secondary-neutral: neutral($brand-secondary);\n$brand-secondary-neutral-light: lighten($brand-secondary-neutral, 35%);\n$brand-secondary-neutral-dark: darken($brand-secondary-neutral, 35%);\n\n// Black & white\n$black: darken($brand-primary-neutral, 38%);\n$white: lighten($brand-primary-neutral, 44%);\n\n\n\n/*\n * Text\n */\n$font-family-sans-serif: 'Concert One', cursive;\n$font-family-serif: 'Space Mono', monospace;\n$font-size-small: 14px;\n$font-size-medium: 16px;\n$font-size-large: 20px;\n$font-size-x-large: 24px;\n\n\n\n/*\n * Layout\n */\n$mobile-max-width: 767px;\n$tablet-min-width: 768px;\n$tablet-max-width: 1024px;\n\n$site-padding-left: 40px;\n$site-padding-right: 40px;\n\n$content-padding-top: 20px;\n$monster-list-width: 200px;\n\nmonster-detail {\n    display: flex;\n    flex-direction: row;\n\n    &>div:first-of-type {\n        padding: 0 20px 20px 20px;\n    }\n\n    .monster-details-card {\n        border: solid 2px $brand-primary-neutral-dark;\n\n        .monster-details-card-header {\n            background-color: $brand-primary-neutral-dark;\n            color: $brand-primary-neutral-light;\n            padding: 20px 14px 10px;\n        }\n\n        dl {\n            padding: 20px 14px 10px;\n            dt {\n                margin-bottom: 6px;\n                font-size: $font-size-large;\n                font-weight: bold;\n            }\n            dd {\n                margin-bottom: 14px;\n            }\n        }\n\n\n    }\n\n    // From https://www.sitepoint.com/pure-css3-paper-curls/\n    .paper {\n        position: relative;\n    \t// width: 70%;\n    \tpadding: 50px;\n    \tbackground-color: #fff;\n    \t-webkit-box-shadow: 0 0 4px rgba(0, 0, 0, 0.2), inset 0 0 50px rgba(0, 0, 0, 0.1);\n    \t-moz-box-shadow: 0 0 4px rgba(0, 0, 0, 0.2), inset 0 0 50px rgba(0, 0, 0, 0.1);\n    \tbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2), inset 0 0 50px rgba(0, 0, 0, 0.1);\n    }\n\n    .paper:after,\n    .paper:before {\n        position: absolute;\n        width: 40%;\n        height: 10px;\n        content: ' ';\n        left: 12px;\n        bottom: 12px;\n        background: transparent;\n        -webkit-transform: skew(-5deg) rotate(-5deg);\n        -moz-transform: skew(-5deg) rotate(-5deg);\n        -ms-transform: skew(-5deg) rotate(-5deg);\n        -o-transform: skew(-5deg) rotate(-5deg);\n        transform: skew(-5deg) rotate(-5deg);\n        -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n        -moz-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n        z-index: -1;\n    }\n\n    .paper:after {\n        left: auto;\n        right: 12px;\n        -webkit-transform: skew(5deg) rotate(5deg);\n        -moz-transform: skew(5deg) rotate(5deg);\n        -ms-transform: skew(5deg) rotate(5deg);\n        -o-transform: skew(5deg) rotate(5deg);\n        transform: skew(5deg) rotate(5deg);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// webpack:///src/app/monster-detail/_monster-detail.scss","// Introspection\n// =============\n\n// Brightness\n// ----------\n/// Determine the brightnss of a color,\n/// adjusted for the visual brightnesses\n/// of different hues.\n/// @group inspect\n/// @param {Color} $color -\n///   Any color value to be analysed\n/// @return {Number} -\n///   The relative visual brightness of the color,\n///   from 0 (black) through 225959 (white).\n@function brightness(\n  $color\n) {\n  // Multiply the primary hues by their respective visual weights\n  $red: red($color) * 299;\n  $green: green($color) * 587;\n  $blue: blue($color) * 114;\n\n  // Collate the resulting total weight\n  @return round($red + $green + $blue / 1000);\n}\n\n// Harmonies\n// =========\n\n\n// Harmony Weight\n// --------------\n/// Calculate an appropriate mix-weighting between two colors,\n/// based on the relative brightness of the colors.\n/// @access private\n/// @group internal\n/// @param {Color} $color -\n///   The base color value, which will be returned\n///   with a subtle harmony color mixed in.\n/// @param {Color} $harmony -\n///   A harmony color to mix into your base color.\n/// @param {Percentage} $median -\n///   The median amount of your harmony color\n///   to mix into your base color,\n///   given the same relative brightness.\n/// @param {Percentage} $margin -\n///   The margin of weight-adjustment\n///   for mixing colors with different relative brihtness.\n///   A margin of `8%` with a median of `16%`\n///   will return mixes weighted between `8%` and `24%` (`16% ± 8%`).\n/// @return {Percentage} -\n///   A percent-value, weighted above or below the given median,\n///   based on the relative visual brightness of the two colors given.\n///   Resulting weights are limited to the `0%-50%` range.\n@function _harmony-weight(\n  $color,\n  $harmony,\n  $median,\n  $margin\n) {\n  // Get the relative brightness of each color\n  $white-bright: brightness(#fff);\n  $color-bright: brightness($color);\n  $harmony-bright: brightness($harmony);\n\n  // Determine the appropriate mix based on comparative brightness\n  $diff: ($harmony-bright - $color-bright) / $white-bright;\n  $mix: $median + round($diff * $margin);\n\n  // Cut off mix values outside the 0%-50% range\n  $mix: min(50%, $mix);\n  $mix: max(0%, $mix);\n\n  // Return the calculated mix weight\n  @return $mix;\n}\n\n\n// Harmonize\n// ---------\n/// Mix a subtle harmony color into your base color,\n/// weighted by the relative brightness of the two colors.\n/// @group manipulate\n/// @param {Color} $color -\n///   The base color value, which will be returned\n///   with a subtle harmony color mixed in.\n/// @param {Color | Function} $harmony ['complement'] -\n///   A harmony color to mix into your base color,\n///   or the name of a function like `complement` or `invert`\n///   that can manipulate the base color and return another color value.\n/// @param {Percentage} $median [16%] -\n///   The median amount of your harmony color\n///   to mix into your base color,\n///   given the same relative brightness.\n/// @param {Percentage} $margin [8%] -\n///   The margin of weight-adjustment\n///   for mixing colors with different relative brihtness.\n///   A margin of `8%` with a median of `16%`\n///   will return mixes weighted between `8%` and `24%` (`16% ± 8%`).\n@function harmonize(\n  $color,\n  $harmony: 'complement',\n  $median: 16%,\n  $margin: 8%\n) {\n  @if type-of($harmony) != 'color' {\n    // If $harmony is not a color, try running it as a function\n    @if function-exists($harmony) {\n      $harmony: call($harmony, $color);\n    }\n\n    // Error if $harmony is still not a valid color\n    @if type-of($harmony) != 'color' {\n      @error '$harmony `#{$harmony}` [#{type-of($harmony)}] is not a valid color for harmonizing.';\n    }\n  }\n\n  // Get the appropriate weighting\n  $mix: _harmony-weight($color, $harmony, $median, $margin);\n\n  // Mix a subtle harmony into your color!\n  @return mix($harmony, $color, $mix);\n}\n\n// Tints & Shades\n// --------------\n\n// Shade\n// -----\n/// Mix a color with black.\n/// @group manipulate\n/// @param {Color} $color - The initial color to be adjusted.\n/// @param {Percentage} $amount - The amount of black to mix in, from `0%-100%`.\n/// @return {Color} - your new, darker color!\n@function shade(\n  $color,\n  $amount\n) {\n  @return mix(#000, $color, $amount);\n}\n\n// Tint\n// -----\n/// Mix a color with white.\n/// @group manipulate\n/// @param {Color} $color - The initial color to be adjusted.\n/// @param {Percentage} $amount - The amount of white to mix in, from `0%-100%`.\n/// @return {Color} - your new, lighter color!\n@function tint(\n  $color,\n  $amount\n) {\n  @return mix(#fff, $color, $amount);\n}\n\n@function neutral($color) {\n\t@if (is-highest-key-value($color)) {\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 19%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 13%);\n\t\t}\n\t}\n\t@else if (is-high-key-value($color)) {\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 31%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 23%);\n\t\t}\n\t}\n\t@else {\n\t\t@if is-highest-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 31%);\n\t\t}\n\t\t@if is-high-key-value(complement($color)) {\n\t\t\t@return mix(complement($color), $color, 26%);\n\t\t}\n\t\t@else {\n\t\t\t@return mix(complement($color), $color, 23%);\n\t\t}\n\t}\n}\n\n/*\n * Colors\n */\n$red: \t hsl(355, 100%, 50%);\n$orange: hsl(20, 100%, 50%);\n$yellow: hsl(60, 100%, 50%);\n$green:  hsl(120, 100%, 50%);\n$cyan:   hsl(180, 100%, 50%);\n$blue:   hsl(240, 100%, 50%);\n$violet: hsl(300, 100%, 50%);\n\n// Starting colors\n$first-color: $green;\n$second-color: complement($first-color);\n\n// Primary shades\n$brand-primary: harmonize($first-color, $second-color);\n$brand-primary-neutral: neutral($brand-primary);\n$brand-primary-neutral-light: lighten($brand-primary-neutral, 35%);\n$brand-primary-neutral-dark: darken($brand-primary-neutral, 35%);\n\n// Secondary shades\n$brand-secondary: harmonize($second-color, $first-color);\n$brand-secondary-neutral: neutral($brand-secondary);\n$brand-secondary-neutral-light: lighten($brand-secondary-neutral, 35%);\n$brand-secondary-neutral-dark: darken($brand-secondary-neutral, 35%);\n\n// Black & white\n$black: darken($brand-primary-neutral, 38%);\n$white: lighten($brand-primary-neutral, 44%);\n\n\n\n/*\n * Text\n */\n$font-family-sans-serif: 'Concert One', cursive;\n$font-family-serif: 'Space Mono', monospace;\n$font-size-small: 14px;\n$font-size-medium: 16px;\n$font-size-large: 20px;\n$font-size-x-large: 24px;\n\n\n\n/*\n * Layout\n */\n$mobile-max-width: 767px;\n$tablet-min-width: 768px;\n$tablet-max-width: 1024px;\n\n$site-padding-left: 40px;\n$site-padding-right: 40px;\n\n$content-padding-top: 20px;\n$monster-list-width: 200px;\n\n@import 'reset';\n@import 'theme';\n\n\n\n// WEBPACK FOOTER //\n// webpack:///src/app/style/app.scss","/*\n * From http://meyerweb.com/eric/tools/css/reset/\n */\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\n\n\n\n// WEBPACK FOOTER //\n// webpack:///src/app/style/_reset.scss","body,\nhtml {\n    color: $black !important;\n    background-color: $white !important;\n\n    font-size: $font-size-medium;\n    font-family: $font-family-serif;\n}\n\nh1, h2, h3, h4, h5 {\n    font-family: $font-family-sans-serif;\n}\n\na, a:hover {\n    color: $brand-secondary-neutral;\n}\n\n\n\n// WEBPACK FOOTER //\n// webpack:///src/app/style/_theme.scss"],"sourceRoot":""}